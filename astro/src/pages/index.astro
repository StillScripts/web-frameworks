---
// An enum containing an option for each component example
enum Components {
	HelloWorld,
	Styling,
	NestingComponents,
	Props,
	HTML,
	BasicVariables,
	DependentVariables,
	ConditionalRendering,
	ListLooping,
	TypingAnimation,
}

// A list of each component based on the enum options above
const componentsList: Components[] = [
	Components.HelloWorld,
	Components.Styling,
	Components.NestingComponents,
	Components.Props,
	Components.HTML,
	Components.BasicVariables,
	Components.DependentVariables,
	Components.ConditionalRendering,
	Components.ListLooping,
	Components.TypingAnimation,
];

/**
 * Method which converts an option of the Components enum into
 * a string to display a title for a component.
 * @param {Components} component
 * @returns {string}
 */
const getComponentTitle = (component: Components): string => {
	switch (component) {
		case Components.HelloWorld:
			return "Hello World";
		case Components.Styling:
			return "Styling";
		case Components.NestingComponents:
			return "Nesting Components";
		case Components.Props:
			return "Passing Props";
		case Components.HTML:
			return "HTML Tags";
		case Components.BasicVariables:
			return "Basic Variables";
		case Components.DependentVariables:
			return "Dependent Variables";
		case Components.ConditionalRendering:
			return "Conditional Rendering";
		case Components.ListLooping:
			return "List Looping";
		case Components.TypingAnimation:
			return "Typing Animation";
	}
};
---

<html lang="en">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width" />
	<title>Astro Basic Framework Concepts</title>
</head>

<body>
	<div class="container">
		<nav class="links">
			<div class="close">
				<svg xmlns="http://www.w3.org/2000/svg" height="32px" width="32px" fill="none" viewBox="0 0 24 24"
					stroke="currentColor" stroke-width="2">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
				</svg>
			</div>
			{componentsList.map((component) => (
			<button type="button">
				{getComponentTitle(component)}
			</button>
			))}
		</nav>
		<div><h1>{getComponentTitle(componentsList[0])}</h1></div>
	</div>
</body>

</html>

<style>
	html,
	body {
		padding: 0;
		margin: 0;
		font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
			Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
		overflow-x: hidden;
	}

	* {
		box-sizing: border-box;
	}

	.container {
		display: flex;
		width: 100vw;
		height: 100vh;
	}

	.links {
  display: flex;
  flex-direction: column;
  background-color: rgba(67, 72, 229, 0.4);
  padding: 16px 8px;
  height: 100vh;
  overflow-y: scroll;
}
.links button {
  background-color: transparent;
  color: rgb(37, 33, 151);
  font-weight: 600;
  font-weight: 600;
  margin: 12px;
  padding: 12px 6px;
  border-radius: 12px;
  text-transform: uppercase;
  list-style: none;
  cursor: pointer;
  border: 2px solid rgb(37, 33, 151);
}

.links button:hover {
  background-color: rgba(37, 33, 151);
  color: rgba(255, 255, 255, 0.8);
  box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.5);
}

.close {
  display: none;
}

@media screen and (max-width: 480px) {


  .links {
    display: none;
    width: 100%;
    height: 100%;
  }

  .close {
    display: flex;
    justify-content: flex-end;
    padding-right: 16px;
  }
}

</style>