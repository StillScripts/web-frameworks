{"react":{"BasicVariables":"import { useState } from \"react\";\r\n\r\nconst BasicVariables = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  function handleClick() {\r\n    setCount(count + 1);\r\n  }\r\n  return (\r\n    <button onClick={handleClick}>\r\n      Clicked {count} {count === 1 ? \"time\" : \"times\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BasicVariables;\r\n","ConditionalRendering":"import { useState } from \"react\";\r\n\r\nconst ConditionalRendering = () => {\r\n  const [x] = useState(Math.floor(Math.random() * 15));\r\n\r\n  return (\r\n    <>\r\n      {x > 10 ? (\r\n        <p>{x} is greater than 10</p>\r\n      ) : 5 > x ? (\r\n        <p>{x} is less than 5</p>\r\n      ) : (\r\n        <p>{x} is between 5 and 10</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConditionalRendering;\r\n","DependentVariables":"import { useEffect, useState } from \"react\";\r\n\r\nconst DependentVariables = () => {\r\n  const [count, setCount] = useState(1);\r\n  const [doubled, setDoubled] = useState(count * 2);\r\n  const [quadrupled, setQuadrupled] = useState(doubled * 2);\r\n\r\n  useEffect(() => {\r\n    setDoubled(count * 2);\r\n    setQuadrupled(doubled * 2);\r\n  }, [count, doubled]);\r\n\r\n  function handleClick() {\r\n    setCount(count + 1);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button onClick={handleClick}>Count: {count}</button>\r\n      <p>\r\n        {count} * 2 = {doubled}\r\n      </p>\r\n      <p>\r\n        {doubled} * 2 = {quadrupled}\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DependentVariables;\r\n","HelloWorld":"import React from \"react\";\r\n\r\nconst HelloWorld = () => <p>Hello world!</p>;\r\n\r\nexport default HelloWorld;\r\n","HTML":"import React from \"react\";\r\n\r\nconst string = `here's some <strong>HTML!!!</strong>`;\r\n\r\nconst HTML = () => (\r\n  <p dangerouslySetInnerHTML={{ __html: string }}></p>\r\n);\r\n\r\nexport default HTML;\r\n","ListLooping":"import React from \"react\";\r\n\r\nconst cats = [\r\n  { id: \"J---aiyznGQ\", name: \"Keyboard Cat\" },\r\n  { id: \"z_AbfPXTKms\", name: \"Maru\" },\r\n  { id: \"OUtn3pvWmpg\", name: \"Henri The Existential Cat\" },\r\n];\r\n\r\nconst ListLooping = () => {\r\n  return (\r\n    <>\r\n      <h1>The Famous Cats of YouTube</h1>\r\n      <ul>\r\n        {cats.map(({ id, name }, i) => (\r\n          <li key={id}>\r\n            <a href={`https://www.youtube.com/watch?v=${id}`}>\r\n              <a target=\"_blank\">\r\n                {i + 1}: {name}\r\n              </a>\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListLooping;\r\n","Props":"import React from \"react\";\r\n\r\nconst Props = ({ answer = \"a mystery\" }) => <p>The answer is {answer}</p>;\r\n\r\nexport default Props;\r\n","ReactComponents":"import React from \"react\";\r\nimport BasicVariables from \"./BasicVariables\";\r\nimport ConditionalRendering from \"./ConditionalRendering\";\r\nimport DependentVariables from \"./DependentVariables\";\r\nimport HelloWorld from \"./HelloWorld\";\r\nimport HTML from \"./HTML\";\r\nimport ListLooping from \"./ListLooping\";\r\nimport Props from \"./Props\";\r\nimport Styling from \"./Styling\";\r\nimport { Components } from \"../../utils/components\";\r\n\r\nconst ReactComponents = ({ currentComponent }) => {\r\n  return (\r\n    <>\r\n      {currentComponent === Components.HelloWorld ? (\r\n        <HelloWorld />\r\n      ) : currentComponent === Components.Styling ? (\r\n        <Styling />\r\n      ) : currentComponent === Components.Props ? (\r\n        <Props answer=\"42\" />\r\n      ) : currentComponent === Components.HTML ? (\r\n        <HTML />\r\n      ) : currentComponent === Components.BasicVariables ? (\r\n        <BasicVariables />\r\n      ) : currentComponent === Components.DependentVariables ? (\r\n        <DependentVariables />\r\n      ) : currentComponent === Components.ConditionalRendering ? (\r\n        <ConditionalRendering />\r\n      ) : (\r\n        <ListLooping />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReactComponents;\r\n","Styling":"import React from \"react\";\r\n\r\nconst styles = {\r\n  color: \"purple\",\r\n  fontFamily: \"'Comic Sans MS', cursive\",\r\n  fontSize: \"2em\",\r\n};\r\n\r\nconst Styling = () => <p style={styles}>Styled!</p>;\r\n\r\nexport default Styling;\r\n"},"solid":{"BasicVariables":"import { createSignal } from \"solid-js\";\r\n\r\nconst BasicVariables = () => {\r\n  const [count, setCount] = createSignal(0);\r\n\r\n  function handleClick() {\r\n    setCount(count() + 1);\r\n  }\r\n  return (\r\n    <button onClick={handleClick}>\r\n      Clicked {count()} {count() === 1 ? \"time\" : \"times\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BasicVariables;\r\n","ConditionalRendering":"import { createSignal, Match, Switch } from \"solid-js\";\r\n\r\nconst ConditionalRendering = () => {\r\n  const [x] = createSignal(Math.floor(Math.random() * 15));\r\n\r\n  return (\r\n    <Switch fallback={<p>{x()} is between 5 and 10</p>}>\r\n      <Match when={x() > 10}>\r\n        <p>{x()} is greater than 10</p>\r\n      </Match>\r\n      <Match when={5 > x()}>\r\n        <p>{x()} is less than 5</p>\r\n      </Match>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default ConditionalRendering;\r\n","DependentVariables":"/** @jsxImportSource solid-js */\r\nimport { createEffect, createSignal } from \"solid-js\";\r\n\r\nconst DependentVariables = () => {\r\n  const [count, setCount] = createSignal(1);\r\n  const [doubled, setDoubled] = createSignal(count() * 2);\r\n  const [quadrupled, setQuadrupled] = createSignal(doubled() * 2);\r\n\r\n  createEffect(() => {\r\n    setDoubled(count() * 2);\r\n    setQuadrupled(doubled() * 2);\r\n  });\r\n\r\n  function handleClick() {\r\n    setCount(count() + 1);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button onClick={handleClick}>Count: {count}</button>\r\n      <p>\r\n        {count} * 2 = {doubled}\r\n      </p>\r\n      <p>\r\n        {doubled} * 2 = {quadrupled}\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DependentVariables;\r\n","HelloWorld":"/** @jsxImportSource solid-js */\r\n\r\nconst HelloWorld = () => {\r\n  return <p>Hello world!</p>;\r\n};\r\n\r\nexport default HelloWorld;\r\n","HTML":"const HTML = () => <p>To be determined</p>;\r\n\r\nexport default HTML;\r\n","ListLooping":"/** @jsxImportSource solid-js */\r\nimport { For } from \"solid-js\";\r\n\r\nconst cats = [\r\n  { id: \"J---aiyznGQ\", name: \"Keyboard Cat\" },\r\n  { id: \"z_AbfPXTKms\", name: \"Maru\" },\r\n  { id: \"OUtn3pvWmpg\", name: \"Henri The Existential Cat\" },\r\n];\r\n\r\nconst ListLooping = () => {\r\n  return (\r\n    <>\r\n      <h1>The Famous Cats of YouTube</h1>\r\n      <ul>\r\n        <For each={cats}>\r\n          {(cat, i) => (\r\n            <li>\r\n              <a\r\n                target=\"_blank\"\r\n                href={`https://www.youtube.com/watch?v=${cat.id}`}\r\n              >\r\n                {i() + 1}: {cat.name}\r\n              </a>\r\n            </li>\r\n          )}\r\n        </For>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListLooping;\r\n","Props":"","SolidComponents":"/** @jsxImportSource solid-js */\r\nimport { Match, Switch } from \"solid-js\";\r\nimport BasicVariables from \"./BasicVariables\";\r\nimport ConditionalRendering from \"./ConditionalRendering\";\r\nimport DependentVariables from \"./DependentVariables\";\r\nimport HelloWorld from \"./HelloWorld\";\r\nimport ListLooping from \"./ListLooping\";\r\nimport Styling from \"./Styling\";\r\nimport { Components } from \"../../utils/components\";\r\n\r\nconst SolidComponents = ({ currentComponent }) => {\r\n  return (\r\n    <Switch fallback={<p>Switch is out of range</p>}>\r\n      <Match when={currentComponent === Components.HelloWorld}>\r\n        <HelloWorld />\r\n      </Match>\r\n      <Match when={currentComponent === Components.Styling}>\r\n        <Styling />\r\n      </Match>\r\n      <Match when={currentComponent === Components.Props}>\r\n        <p>To be determined</p>\r\n      </Match>\r\n      <Match when={currentComponent === Components.HTML}>\r\n        <p>To be determined</p>\r\n      </Match>\r\n      <Match when={currentComponent === Components.BasicVariables}>\r\n        <BasicVariables />\r\n      </Match>\r\n      <Match when={currentComponent === Components.DependentVariables}>\r\n        <DependentVariables />\r\n      </Match>\r\n      <Match when={currentComponent === Components.ConditionalRendering}>\r\n        <ConditionalRendering />\r\n      </Match>\r\n      <Match when={currentComponent === Components.ListLooping}>\r\n        <ListLooping />\r\n      </Match>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default SolidComponents;\r\n","Styling":"/** @jsxImportSource solid-js */\r\n\r\nconst styles = {\r\n  color: \"purple\",\r\n  \"font-family\": \"'Comic Sans MS', cursive\",\r\n  \"font-size\": \"2em\",\r\n};\r\n\r\nconst Styling = () => <p style={styles}>Styled!</p>;\r\n\r\nexport default Styling;\r\n"},"svelte":{"BasicVariables":"<script>\r\n\tlet count = 0;\r\n\r\n\tfunction handleClick() {\r\n\t\tcount += 1;\r\n\t}\r\n</script>\r\n\r\n<button on:click={handleClick}>\r\n\tClicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>","ConditionalRendering":"<script>\r\n\tlet x = Math.floor(Math.random() * 15);;\r\n</script>\r\n\r\n{#if x > 10}\r\n\t<p>{x} is greater than 10</p>\r\n{:else if 5 > x}\r\n\t<p>{x} is less than 5</p>\r\n{:else}\r\n\t<p>{x} is between 5 and 10</p>\r\n{/if}","DependentVariables":"<script>\r\n\tlet count = 1;\r\n\r\n\t// the `$:` means 're-run whenever these values change'\r\n\t$: doubled = count * 2;\r\n\t$: quadrupled = doubled * 2;\r\n\r\n\tfunction handleClick() {\r\n\t\tcount += 1;\r\n\t}\r\n</script>\r\n\r\n<button on:click={handleClick}>\r\n\tCount: {count}\r\n</button>\r\n\r\n<p>{count} * 2 = {doubled}</p>\r\n<p>{doubled} * 2 = {quadrupled}</p>","HelloWorld":"<script>\r\n\tlet name = 'world';\r\n</script>\r\n\r\n<p>Hello {name}!</p>\r\n","HTML":"<script>\r\n\tlet string = `here's some <strong>HTML!!!</strong>`;\r\n</script>\r\n\r\n<p>{@html string}</p>","ListLooping":"<script>\r\n\tlet cats = [\r\n\t\t{ id: 'J---aiyznGQ', name: 'Keyboard Cat' },\r\n\t\t{ id: 'z_AbfPXTKms', name: 'Maru' },\r\n\t\t{ id: 'OUtn3pvWmpg', name: 'Henri The Existential Cat' }\r\n\t];\r\n</script>\r\n\r\n<h1>The Famous Cats of YouTube</h1>\r\n<ul>\r\n\t{#each cats as { id, name }, i}\r\n\t\t<li>\r\n\t\t\t<a target=\"_blank\" href=\"https://www.youtube.com/watch?v={id}\">\r\n\t\t\t\t{i + 1}: {name}\r\n\t\t\t</a>\r\n\t\t</li>\r\n\t{/each}\r\n</ul>\r\n","Props":"<script>\r\n\texport let answer = 'a mystery' ;\r\n</script>\r\n\r\n<p>The answer is {answer}</p>","Styling":"<p>Styled!</p>\r\n\r\n<style>\r\n\tp {\r\n\t\tcolor: purple;\r\n\t\tfont-family: 'Comic Sans MS', cursive;\r\n\t\tfont-size: 2em;\r\n\t}\r\n</style>","SvelteComponents":"<script lang=\"ts\">\r\n  import { Components } from \"../../utils/components\";\r\n  import BasicVariables from \"./BasicVariables.svelte\";\r\n  import ConditionalRendering from \"./ConditionalRendering.svelte\";\r\n  import DependentVariables from \"./DependentVariables.svelte\";\r\n  import HelloWorld from \"./HelloWorld.svelte\";\r\n  import HTML from \"./HTML.svelte\";\r\n  import ListLooping from \"./ListLooping.svelte\";\r\n  import Props from \"./Props.svelte\";\r\n  import Styling from \"./Styling.svelte\";\r\n\r\n  export let currentComponent: Components = Components.HelloWorld;\r\n</script>\r\n\r\n<div>\r\n  {#if currentComponent === Components.HelloWorld}\r\n    <HelloWorld />\r\n  {:else if currentComponent === Components.Styling}\r\n    <Styling />\r\n  {:else if currentComponent === Components.Props}\r\n    <Props />\r\n  {:else if currentComponent === Components.HTML}\r\n    <HTML />\r\n  {:else if currentComponent === Components.BasicVariables}\r\n    <BasicVariables />\r\n  {:else if currentComponent === Components.DependentVariables}\r\n    <DependentVariables />\r\n  {:else if currentComponent === Components.ConditionalRendering}\r\n    <ConditionalRendering />\r\n  {:else if currentComponent === Components.ListLooping}\r\n    <ListLooping />\r\n  {/if}\r\n</div>\r\n"},"vue":{}}