{"react":{"BasicVariables":"import { useState } from \"react\"\n\nconst BasicVariables = () => {\n  const [count, setCount] = useState(0)\n\n  function handleClick() {\n    setCount(count + 1)\n  }\n  return (\n    <button onClick={handleClick}>\n      Clicked {count} {count === 1 ? \"time\" : \"times\"}\n    </button>\n  )\n}\n\nexport default BasicVariables\n","ConditionalRendering":"import { useState } from \"react\"\n\nconst ConditionalRendering = () => {\n  const [x] = useState(Math.floor(Math.random() * 15))\n\n  return (\n    <>\n      {x > 10 ? (\n        <p>{x} is greater than 10</p>\n      ) : 5 > x ? (\n        <p>{x} is less than 5</p>\n      ) : (\n        <p>{x} is between 5 and 10</p>\n      )}\n    </>\n  )\n}\n\nexport default ConditionalRendering\n","DependentVariables":"import { useEffect, useState } from \"react\"\n\nconst DependentVariables = () => {\n  const [count, setCount] = useState(1)\n  const [doubled, setDoubled] = useState(count * 2)\n  const [quadrupled, setQuadrupled] = useState(doubled * 2)\n\n  useEffect(() => {\n    setDoubled(count * 2)\n    setQuadrupled(doubled * 2)\n  }, [count, doubled])\n\n  function handleClick() {\n    setCount(count + 1)\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>Count: {count}</button>\n      <p>\n        {count} * 2 = {doubled}\n      </p>\n      <p>\n        {doubled} * 2 = {quadrupled}\n      </p>\n    </>\n  )\n}\n\nexport default DependentVariables\n","HelloWorld":"import React from \"react\"\n\nconst HelloWorld = () => <p>Hello world!</p>\n\nexport default HelloWorld\n","HTML":"import React from \"react\"\n\nconst string = `here's some <strong>HTML!!!</strong>`\n\nconst HTML = () => <p dangerouslySetInnerHTML={{ __html: string }}></p>\n\nexport default HTML\n","ListLooping":"import React from \"react\"\n\nconst cats = [\n  { id: \"J---aiyznGQ\", name: \"Keyboard Cat\" },\n  { id: \"z_AbfPXTKms\", name: \"Maru\" },\n  { id: \"OUtn3pvWmpg\", name: \"Henri The Existential Cat\" },\n]\n\nconst ListLooping = () => {\n  return (\n    <>\n      <h1>The Famous Cats of YouTube</h1>\n      <ul>\n        {cats.map(({ id, name }, i) => (\n          <li key={id}>\n            <a href={`https://www.youtube.com/watch?v=${id}`}>\n              <a target=\"_blank\">\n                {i + 1}: {name}\n              </a>\n            </a>\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListLooping\n","Props":"import React from \"react\"\n\nconst Props = ({ answer = \"a mystery\" }) => <p>The answer is {answer}</p>\n\nexport default Props\n","ReactComponents":"import React from \"react\"\nimport BasicVariables from \"./BasicVariables\"\nimport ConditionalRendering from \"./ConditionalRendering\"\nimport DependentVariables from \"./DependentVariables\"\nimport HelloWorld from \"./HelloWorld\"\nimport HTML from \"./HTML\"\nimport ListLooping from \"./ListLooping\"\nimport Props from \"./Props\"\nimport Styling from \"./Styling\"\nimport { Components } from \"../../utils/components\"\n\nconst ReactComponents = ({ currentComponent }) => {\n  return (\n    <>\n      {currentComponent === Components.HelloWorld ? (\n        <HelloWorld />\n      ) : currentComponent === Components.Styling ? (\n        <Styling />\n      ) : currentComponent === Components.Props ? (\n        <Props answer=\"42\" />\n      ) : currentComponent === Components.HTML ? (\n        <HTML />\n      ) : currentComponent === Components.BasicVariables ? (\n        <BasicVariables />\n      ) : currentComponent === Components.DependentVariables ? (\n        <DependentVariables />\n      ) : currentComponent === Components.ConditionalRendering ? (\n        <ConditionalRendering />\n      ) : (\n        <ListLooping />\n      )}\n    </>\n  )\n}\n\nexport default ReactComponents\n","Styling":"import React from \"react\"\n\nconst styles = {\n  color: \"purple\",\n  fontFamily: \"'Comic Sans MS', cursive\",\n  fontSize: \"2em\",\n}\n\nconst Styling = () => <p style={styles}>Styled!</p>\n\nexport default Styling\n"},"solid":{"BasicVariables":"import { createSignal } from \"solid-js\"\n\nconst BasicVariables = () => {\n  const [count, setCount] = createSignal(0)\n\n  function handleClick() {\n    setCount(count() + 1)\n  }\n  return (\n    <button onClick={handleClick}>\n      Clicked {count()} {count() === 1 ? \"time\" : \"times\"}\n    </button>\n  )\n}\n\nexport default BasicVariables\n","ConditionalRendering":"import { createSignal, Match, Switch } from \"solid-js\"\n\nconst ConditionalRendering = () => {\n  const [x] = createSignal(Math.floor(Math.random() * 15))\n\n  return (\n    <Switch fallback={<p>{x()} is between 5 and 10</p>}>\n      <Match when={x() > 10}>\n        <p>{x()} is greater than 10</p>\n      </Match>\n      <Match when={5 > x()}>\n        <p>{x()} is less than 5</p>\n      </Match>\n    </Switch>\n  )\n}\n\nexport default ConditionalRendering\n","DependentVariables":"/** @jsxImportSource solid-js */\nimport { createEffect, createSignal } from \"solid-js\"\n\nconst DependentVariables = () => {\n  const [count, setCount] = createSignal(1)\n  const [doubled, setDoubled] = createSignal(count() * 2)\n  const [quadrupled, setQuadrupled] = createSignal(doubled() * 2)\n\n  createEffect(() => {\n    setDoubled(count() * 2)\n    setQuadrupled(doubled() * 2)\n  })\n\n  function handleClick() {\n    setCount(count() + 1)\n  }\n\n  return (\n    <>\n      <button onClick={handleClick}>Count: {count}</button>\n      <p>\n        {count} * 2 = {doubled}\n      </p>\n      <p>\n        {doubled} * 2 = {quadrupled}\n      </p>\n    </>\n  )\n}\n\nexport default DependentVariables\n","HelloWorld":"/** @jsxImportSource solid-js */\n\nconst HelloWorld = () => {\n  return <p>Hello world!</p>\n}\n\nexport default HelloWorld\n","HTML":"const HTML = () => <p>To be determined</p>\n\nexport default HTML\n","ListLooping":"/** @jsxImportSource solid-js */\nimport { For } from \"solid-js\"\n\nconst cats = [\n  { id: \"J---aiyznGQ\", name: \"Keyboard Cat\" },\n  { id: \"z_AbfPXTKms\", name: \"Maru\" },\n  { id: \"OUtn3pvWmpg\", name: \"Henri The Existential Cat\" },\n]\n\nconst ListLooping = () => {\n  return (\n    <>\n      <h1>The Famous Cats of YouTube</h1>\n      <ul>\n        <For each={cats}>\n          {(cat, i) => (\n            <li>\n              <a\n                target=\"_blank\"\n                href={`https://www.youtube.com/watch?v=${cat.id}`}\n              >\n                {i() + 1}: {cat.name}\n              </a>\n            </li>\n          )}\n        </For>\n      </ul>\n    </>\n  )\n}\n\nexport default ListLooping\n","Props":"","SolidComponents":"/** @jsxImportSource solid-js */\nimport { Match, Switch } from \"solid-js\"\nimport BasicVariables from \"./BasicVariables\"\nimport ConditionalRendering from \"./ConditionalRendering\"\nimport DependentVariables from \"./DependentVariables\"\nimport HelloWorld from \"./HelloWorld\"\nimport ListLooping from \"./ListLooping\"\nimport Styling from \"./Styling\"\nimport { Components } from \"../../utils/components\"\n\nconst SolidComponents = ({ currentComponent }) => {\n  return (\n    <Switch fallback={<p>Switch is out of range</p>}>\n      <Match when={currentComponent === Components.HelloWorld}>\n        <HelloWorld />\n      </Match>\n      <Match when={currentComponent === Components.Styling}>\n        <Styling />\n      </Match>\n      <Match when={currentComponent === Components.Props}>\n        <p>To be determined</p>\n      </Match>\n      <Match when={currentComponent === Components.HTML}>\n        <p>To be determined</p>\n      </Match>\n      <Match when={currentComponent === Components.BasicVariables}>\n        <BasicVariables />\n      </Match>\n      <Match when={currentComponent === Components.DependentVariables}>\n        <DependentVariables />\n      </Match>\n      <Match when={currentComponent === Components.ConditionalRendering}>\n        <ConditionalRendering />\n      </Match>\n      <Match when={currentComponent === Components.ListLooping}>\n        <ListLooping />\n      </Match>\n    </Switch>\n  )\n}\n\nexport default SolidComponents\n","Styling":"/** @jsxImportSource solid-js */\n\nconst styles = {\n  color: \"purple\",\n  \"font-family\": \"'Comic Sans MS', cursive\",\n  \"font-size\": \"2em\",\n}\n\nconst Styling = () => <p style={styles}>Styled!</p>\n\nexport default Styling\n"},"svelte":{"BasicVariables":"<script>\r\n\tlet count = 0;\r\n\r\n\tfunction handleClick() {\r\n\t\tcount += 1;\r\n\t}\r\n</script>\r\n\r\n<button on:click={handleClick}>\r\n\tClicked {count} {count === 1 ? 'time' : 'times'}\r\n</button>","ConditionalRendering":"<script>\r\n\tlet x = Math.floor(Math.random() * 15);;\r\n</script>\r\n\r\n{#if x > 10}\r\n\t<p>{x} is greater than 10</p>\r\n{:else if 5 > x}\r\n\t<p>{x} is less than 5</p>\r\n{:else}\r\n\t<p>{x} is between 5 and 10</p>\r\n{/if}","DependentVariables":"<script>\r\n\tlet count = 1;\r\n\r\n\t// the `$:` means 're-run whenever these values change'\r\n\t$: doubled = count * 2;\r\n\t$: quadrupled = doubled * 2;\r\n\r\n\tfunction handleClick() {\r\n\t\tcount += 1;\r\n\t}\r\n</script>\r\n\r\n<button on:click={handleClick}>\r\n\tCount: {count}\r\n</button>\r\n\r\n<p>{count} * 2 = {doubled}</p>\r\n<p>{doubled} * 2 = {quadrupled}</p>","HelloWorld":"<script>\r\n\tlet name = 'world';\r\n</script>\r\n\r\n<p>Hello {name}!</p>\r\n","HTML":"<script>\r\n\tlet string = `here's some <strong>HTML!!!</strong>`;\r\n</script>\r\n\r\n<p>{@html string}</p>","ListLooping":"<script>\r\n\tlet cats = [\r\n\t\t{ id: 'J---aiyznGQ', name: 'Keyboard Cat' },\r\n\t\t{ id: 'z_AbfPXTKms', name: 'Maru' },\r\n\t\t{ id: 'OUtn3pvWmpg', name: 'Henri The Existential Cat' }\r\n\t];\r\n</script>\r\n\r\n<h1>The Famous Cats of YouTube</h1>\r\n<ul>\r\n\t{#each cats as { id, name }, i}\r\n\t\t<li>\r\n\t\t\t<a target=\"_blank\" href=\"https://www.youtube.com/watch?v={id}\">\r\n\t\t\t\t{i + 1}: {name}\r\n\t\t\t</a>\r\n\t\t</li>\r\n\t{/each}\r\n</ul>\r\n","Props":"<script>\r\n\texport let answer = 'a mystery' ;\r\n</script>\r\n\r\n<p>The answer is {answer}</p>","Styling":"<p>Styled!</p>\r\n\r\n<style>\r\n\tp {\r\n\t\tcolor: purple;\r\n\t\tfont-family: 'Comic Sans MS', cursive;\r\n\t\tfont-size: 2em;\r\n\t}\r\n</style>","SvelteComponents":"<script lang=\"ts\">\r\n  import { Components } from \"../../utils/components\";\r\n  import BasicVariables from \"./BasicVariables.svelte\";\r\n  import ConditionalRendering from \"./ConditionalRendering.svelte\";\r\n  import DependentVariables from \"./DependentVariables.svelte\";\r\n  import HelloWorld from \"./HelloWorld.svelte\";\r\n  import HTML from \"./HTML.svelte\";\r\n  import ListLooping from \"./ListLooping.svelte\";\r\n  import Props from \"./Props.svelte\";\r\n  import Styling from \"./Styling.svelte\";\r\n\r\n  export let currentComponent: Components = Components.HelloWorld;\r\n</script>\r\n\r\n<div>\r\n  {#if currentComponent === Components.HelloWorld}\r\n    <HelloWorld />\r\n  {:else if currentComponent === Components.Styling}\r\n    <Styling />\r\n  {:else if currentComponent === Components.Props}\r\n    <Props />\r\n  {:else if currentComponent === Components.HTML}\r\n    <HTML />\r\n  {:else if currentComponent === Components.BasicVariables}\r\n    <BasicVariables />\r\n  {:else if currentComponent === Components.DependentVariables}\r\n    <DependentVariables />\r\n  {:else if currentComponent === Components.ConditionalRendering}\r\n    <ConditionalRendering />\r\n  {:else if currentComponent === Components.ListLooping}\r\n    <ListLooping />\r\n  {/if}\r\n</div>\r\n"},"vue":{"BasicVariables":"<script>\r\nexport default {\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n\r\n<template>\r\n\t<button @click=\"count++\">Clicked {{ count }} {{ count === 1 ? 'time' : 'times' }}</button>\r\n</template>\r\n\r\n","ConditionalRendering":"<script>\r\nexport default {\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tx: Math.floor(Math.random() * 15)\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n\r\n<template>\r\n\t<p v-if=\"x > 10\">{{ x }} is greater than 10</p>\r\n\t<p v-else-if=\"5 > x\">{{ x }} is less than 5</p>\r\n  <p v-else>{{ x }} is between 5 and 10</p>\r\n</template>","DependentVariables":"<script>\r\nexport default {\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tcount: 1,\r\n\t\t\tdoubled: 2,\r\n\t\t\tquadrupled: 4\r\n\t\t}\r\n\t},\r\n\twatch: {\r\n\t\tcount(newCount, oldCount) {\r\n\t\t\tthis.doubled = newCount * 2;\r\n\t\t\tthis.quadrupled = newCount * 4;\r\n\t\t}\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n\t<div>\r\n\t\t<button @click=\"count++\">Count {{ count }}</button>\r\n\t\t<p>{{count}} * 2 = {{doubled}}</p>\r\n\t\t<p>{{doubled}} * 2 = {{quadrupled}}</p>\r\n\t</div>\r\n</template>\r\n","HelloWorld":"<script>\r\nexport default {\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tname: 'world'\r\n\t\t}\r\n\t}\r\n}\r\n</script>\r\n\r\n<template>\r\n\t<p>Hello {{ name }}!</p>\r\n</template>","HTML":"<template>\r\n\t<p>To be determined</p>\r\n</template>","ListLooping":"<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      cats: [\r\n        { id: \"J---aiyznGQ\", name: \"Keyboard Cat\" },\r\n        { id: \"z_AbfPXTKms\", name: \"Maru\" },\r\n        { id: \"OUtn3pvWmpg\", name: \"Henri The Existential Cat\" },\r\n      ],\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <h1>The Famous Cats of YouTube</h1>\r\n    <ul>\r\n      <li v-for=\"(cat, index) of cats\" :key=\"cat.id\">\r\n        <a target=\"_blank\" :href=\"'https://www.youtube.com/watch?v=' + cat.id\">\r\n          {{ index + 1 }}: {{ cat.name }}\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n","Props":"<script>\r\nexport default {\r\n\tprops: {\r\n\t\tanswer: String\r\n\t}\r\n}\r\n</script>\r\n\r\n<template>\r\n  <p>The answer is {{answer}}</p>\r\n</template>","Styling":"<template>\r\n\t<p class=\"text\">Styled!</p>\r\n</template>\r\n\r\n<style scoped>\r\n\t.text {\r\n\t\tcolor: purple;\r\n\t\tfont-family: 'Comic Sans MS', cursive;\r\n\t\tfont-size: 2em;\r\n\t}\r\n</style>","VueComponents":"<script lang=\"ts\">\r\nimport HelloWorld from \"./HelloWorld.vue\"\r\nimport Styling from \"./Styling.vue\"\r\nimport Props from \"./Props.vue\"\r\nimport DependentVariables from \"./DependentVariables.vue\"\r\nimport ConditionalRendering from \"./ConditionalRendering.vue\"\r\nimport ListLooping from \"./ListLooping.vue\"\r\nimport BasicVariables from \"./BasicVariables.vue\"\r\nimport { Components } from \"../../utils/components\"\r\n\r\nexport default {\r\n  components: {\r\n    HelloWorld,\r\n    ListLooping,\r\n    BasicVariables,\r\n    Styling,\r\n    DependentVariables,\r\n    ConditionalRendering,\r\n    Props,\r\n  },\r\n  data() {\r\n    return {\r\n      Components: Components,\r\n    }\r\n  },\r\n  props: {\r\n    currentComponent: Components,\r\n  },\r\n}\r\n</script>\r\n<template>\r\n  <div>\r\n    <HelloWorld v-if=\"currentComponent === Components.HelloWorld\" />\r\n    <Styling v-if=\"currentComponent === Components.Styling\" />\r\n    <Props v-if=\"currentComponent === Components.Props\" :answer=\"42\" />\r\n    <div v-if=\"currentComponent === Components.HTML\">To be completed</div>\r\n    <BasicVariables v-if=\"currentComponent === Components.BasicVariables\" />\r\n    <DependentVariables\r\n      v-if=\"currentComponent === Components.DependentVariables\"\r\n    />\r\n    <ConditionalRendering\r\n      v-if=\"currentComponent === Components.ConditionalRendering\"\r\n    />\r\n    <ListLooping v-if=\"currentComponent === Components.ListLooping\" />\r\n  </div>\r\n</template>\r\n"}}